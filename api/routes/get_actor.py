import pandas as pd
from fastapi import FastAPI, Response, APIRouter
import json

# Import the FastAPI framework
router = APIRouter()

# # Read a CSV file containing movie data into a pandas DataFrame
df = pd.read_pickle('./data/cleaned/movies.pkl')

@router.get("/api/v1/actor/{actor}")
def get_actor(actor: str):
    """
    Endpoint to retrieve information about movies featuring a specific actor.

    Args:
        actor (str): The name of the actor.

    Returns:
        Response: JSON response containing information about the actor's movies.
    """
    
    # Filter the DataFrame to include only rows where the 'cast' column is not null and contains the specified actor
    df1 = df[df['cast'].notna() & df['cast'].str.contains(actor)]
    
    # Calculate the total number of movies in which the actor appears
    movies_count = df1.shape[0]
    
    # Calculate the total revenue generated by the movies in which the actor appears
    revenue = df1['revenue'].sum()
    
    # Calculate the average revenue per movie for the actor
    avg_revenue = df1['revenue'].mean()

    roi = df1['ROI'].mean()

    # Create a list to store the movie objects
    movies = []
    # Iterate over the rows in the filtered DataFrame
    for _, row in df1.iterrows():
        # Create a dictionary for each movie with the desired information
        movie = {
            "title": row['title'],
            "release_year": pd.to_datetime(row['release_date']).year,
            "overview": row['overview'],
            "budget": row['budget'],
            "revenue": row['revenue'],
            "ROI": row['ROI'],
            "cast": row['cast'].replace("'", "").replace('"', "").replace("[", "").replace("]", "").split(", "),
            "crew": row['crew'].replace("'", "").replace('"', "").replace("[", "").replace("]", "").split(", ")
        }
        # Append the movie dictionary to the movies list
        movies.append(movie)
    
    # Create a dictionary to store the data for the API response
    data = {
        "name": actor,
        "total movies": movies_count,
        "total revenue": revenue,
        "average revenue": avg_revenue,
        "ROI": roi,
        "movies": movies
    }
    
    # Convert the data dictionary to a JSON string with proper indentation
    json_data = json.dumps(data, indent=4)
    
    # Create a response object with the JSON data and the appropriate media type
    response = Response(content=json_data, media_type="application/json")
    
    # Return the response object
    return response